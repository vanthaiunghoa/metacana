/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MetacanasCrowdsaleInterface extends ethers.utils.Interface {
  functions: {
    "CAP_PER_ADDRESS()": FunctionFragment;
    "CROWDSALE_END_TIME()": FunctionFragment;
    "CROWDSALE_START_TIME()": FunctionFragment;
    "KARMASALE_START_TIME()": FunctionFragment;
    "KARMA_MEMBERSHIP_AMOUNT()": FunctionFragment;
    "MIN_CONTRIBUTION()": FunctionFragment;
    "PUBLICSALE_START_TIME()": FunctionFragment;
    "ROUND_1_CAP()": FunctionFragment;
    "ROUND_2_CAP()": FunctionFragment;
    "ROUND_3_CAP()": FunctionFragment;
    "addAndLockLiquidity()": FunctionFragment;
    "contributions(address)": FunctionFragment;
    "cookslist(address)": FunctionFragment;
    "getCurrentRound()": FunctionFragment;
    "hasEnded()": FunctionFragment;
    "isOpen()": FunctionFragment;
    "karmaSaleStarted()": FunctionFragment;
    "liquidityLocked()": FunctionFragment;
    "metacanaToken()": FunctionFragment;
    "metacanasPerBNB()": FunctionFragment;
    "owner()": FunctionFragment;
    "publicSaleStarted()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCooksList(address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "weiRaised()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CAP_PER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CROWDSALE_END_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CROWDSALE_START_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KARMASALE_START_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KARMA_MEMBERSHIP_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_CONTRIBUTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PUBLICSALE_START_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROUND_1_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROUND_2_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROUND_3_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAndLockLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "cookslist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getCurrentRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasEnded", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOpen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "karmaSaleStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metacanaToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metacanasPerBNB",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicSaleStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCooksList",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "weiRaised", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CAP_PER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CROWDSALE_END_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CROWDSALE_START_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KARMASALE_START_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KARMA_MEMBERSHIP_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_CONTRIBUTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PUBLICSALE_START_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROUND_1_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROUND_2_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROUND_3_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAndLockLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cookslist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasEnded", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "karmaSaleStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metacanaToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metacanasPerBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCooksList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weiRaised", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenPurchase(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPurchase"): EventFragment;
}

export class MetacanasCrowdsale extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MetacanasCrowdsaleInterface;

  functions: {
    CAP_PER_ADDRESS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "CAP_PER_ADDRESS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    CROWDSALE_END_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    "CROWDSALE_END_TIME()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    CROWDSALE_START_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    "CROWDSALE_START_TIME()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    KARMASALE_START_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    "KARMASALE_START_TIME()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    KARMA_MEMBERSHIP_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "KARMA_MEMBERSHIP_AMOUNT()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MIN_CONTRIBUTION(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MIN_CONTRIBUTION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PUBLICSALE_START_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PUBLICSALE_START_TIME()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROUND_1_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ROUND_1_CAP()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROUND_2_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ROUND_2_CAP()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROUND_3_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ROUND_3_CAP()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAndLockLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addAndLockLiquidity()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "contributions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cookslist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "cookslist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getCurrentRound(overrides?: CallOverrides): Promise<[string]>;

    "getCurrentRound()"(overrides?: CallOverrides): Promise<[string]>;

    hasEnded(overrides?: CallOverrides): Promise<[boolean]>;

    "hasEnded()"(overrides?: CallOverrides): Promise<[boolean]>;

    isOpen(overrides?: CallOverrides): Promise<[boolean]>;

    "isOpen()"(overrides?: CallOverrides): Promise<[boolean]>;

    karmaSaleStarted(overrides?: CallOverrides): Promise<[boolean]>;

    "karmaSaleStarted()"(overrides?: CallOverrides): Promise<[boolean]>;

    liquidityLocked(overrides?: CallOverrides): Promise<[boolean]>;

    "liquidityLocked()"(overrides?: CallOverrides): Promise<[boolean]>;

    metacanaToken(overrides?: CallOverrides): Promise<[string]>;

    "metacanaToken()"(overrides?: CallOverrides): Promise<[string]>;

    metacanasPerBNB(overrides?: CallOverrides): Promise<[BigNumber]>;

    "metacanasPerBNB()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    publicSaleStarted(overrides?: CallOverrides): Promise<[boolean]>;

    "publicSaleStarted()"(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCooksList(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCooksList(address[])"(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weiRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    "weiRaised()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  CAP_PER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

  "CAP_PER_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

  CROWDSALE_END_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  "CROWDSALE_END_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

  CROWDSALE_START_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  "CROWDSALE_START_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

  KARMASALE_START_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  "KARMASALE_START_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

  KARMA_MEMBERSHIP_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  "KARMA_MEMBERSHIP_AMOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_CONTRIBUTION(overrides?: CallOverrides): Promise<BigNumber>;

  "MIN_CONTRIBUTION()"(overrides?: CallOverrides): Promise<BigNumber>;

  PUBLICSALE_START_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  "PUBLICSALE_START_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

  ROUND_1_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  "ROUND_1_CAP()"(overrides?: CallOverrides): Promise<BigNumber>;

  ROUND_2_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  "ROUND_2_CAP()"(overrides?: CallOverrides): Promise<BigNumber>;

  ROUND_3_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  "ROUND_3_CAP()"(overrides?: CallOverrides): Promise<BigNumber>;

  addAndLockLiquidity(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addAndLockLiquidity()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contributions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "contributions(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cookslist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "cookslist(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getCurrentRound(overrides?: CallOverrides): Promise<string>;

  "getCurrentRound()"(overrides?: CallOverrides): Promise<string>;

  hasEnded(overrides?: CallOverrides): Promise<boolean>;

  "hasEnded()"(overrides?: CallOverrides): Promise<boolean>;

  isOpen(overrides?: CallOverrides): Promise<boolean>;

  "isOpen()"(overrides?: CallOverrides): Promise<boolean>;

  karmaSaleStarted(overrides?: CallOverrides): Promise<boolean>;

  "karmaSaleStarted()"(overrides?: CallOverrides): Promise<boolean>;

  liquidityLocked(overrides?: CallOverrides): Promise<boolean>;

  "liquidityLocked()"(overrides?: CallOverrides): Promise<boolean>;

  metacanaToken(overrides?: CallOverrides): Promise<string>;

  "metacanaToken()"(overrides?: CallOverrides): Promise<string>;

  metacanasPerBNB(overrides?: CallOverrides): Promise<BigNumber>;

  "metacanasPerBNB()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  publicSaleStarted(overrides?: CallOverrides): Promise<boolean>;

  "publicSaleStarted()"(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCooksList(
    accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCooksList(address[])"(
    accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weiRaised(overrides?: CallOverrides): Promise<BigNumber>;

  "weiRaised()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    CAP_PER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "CAP_PER_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    CROWDSALE_END_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "CROWDSALE_END_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    CROWDSALE_START_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "CROWDSALE_START_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    KARMASALE_START_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "KARMASALE_START_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    KARMA_MEMBERSHIP_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "KARMA_MEMBERSHIP_AMOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CONTRIBUTION(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_CONTRIBUTION()"(overrides?: CallOverrides): Promise<BigNumber>;

    PUBLICSALE_START_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "PUBLICSALE_START_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROUND_1_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    "ROUND_1_CAP()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROUND_2_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    "ROUND_2_CAP()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROUND_3_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    "ROUND_3_CAP()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAndLockLiquidity(overrides?: CallOverrides): Promise<void>;

    "addAndLockLiquidity()"(overrides?: CallOverrides): Promise<void>;

    contributions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "contributions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cookslist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "cookslist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCurrentRound(overrides?: CallOverrides): Promise<string>;

    "getCurrentRound()"(overrides?: CallOverrides): Promise<string>;

    hasEnded(overrides?: CallOverrides): Promise<boolean>;

    "hasEnded()"(overrides?: CallOverrides): Promise<boolean>;

    isOpen(overrides?: CallOverrides): Promise<boolean>;

    "isOpen()"(overrides?: CallOverrides): Promise<boolean>;

    karmaSaleStarted(overrides?: CallOverrides): Promise<boolean>;

    "karmaSaleStarted()"(overrides?: CallOverrides): Promise<boolean>;

    liquidityLocked(overrides?: CallOverrides): Promise<boolean>;

    "liquidityLocked()"(overrides?: CallOverrides): Promise<boolean>;

    metacanaToken(overrides?: CallOverrides): Promise<string>;

    "metacanaToken()"(overrides?: CallOverrides): Promise<string>;

    metacanasPerBNB(overrides?: CallOverrides): Promise<BigNumber>;

    "metacanasPerBNB()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    publicSaleStarted(overrides?: CallOverrides): Promise<boolean>;

    "publicSaleStarted()"(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setCooksList(accounts: string[], overrides?: CallOverrides): Promise<void>;

    "setCooksList(address[])"(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weiRaised(overrides?: CallOverrides): Promise<BigNumber>;

    "weiRaised()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    TokenPurchase(
      beneficiary: string | null,
      weiAmount: null,
      tokenAmount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { beneficiary: string; weiAmount: BigNumber; tokenAmount: BigNumber }
    >;
  };

  estimateGas: {
    CAP_PER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "CAP_PER_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    CROWDSALE_END_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "CROWDSALE_END_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    CROWDSALE_START_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "CROWDSALE_START_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    KARMASALE_START_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "KARMASALE_START_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    KARMA_MEMBERSHIP_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "KARMA_MEMBERSHIP_AMOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CONTRIBUTION(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_CONTRIBUTION()"(overrides?: CallOverrides): Promise<BigNumber>;

    PUBLICSALE_START_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "PUBLICSALE_START_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROUND_1_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    "ROUND_1_CAP()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROUND_2_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    "ROUND_2_CAP()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROUND_3_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    "ROUND_3_CAP()"(overrides?: CallOverrides): Promise<BigNumber>;

    addAndLockLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addAndLockLiquidity()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contributions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "contributions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cookslist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "cookslist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentRound(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentRound()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasEnded(overrides?: CallOverrides): Promise<BigNumber>;

    "hasEnded()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOpen(overrides?: CallOverrides): Promise<BigNumber>;

    "isOpen()"(overrides?: CallOverrides): Promise<BigNumber>;

    karmaSaleStarted(overrides?: CallOverrides): Promise<BigNumber>;

    "karmaSaleStarted()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    metacanaToken(overrides?: CallOverrides): Promise<BigNumber>;

    "metacanaToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    metacanasPerBNB(overrides?: CallOverrides): Promise<BigNumber>;

    "metacanasPerBNB()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleStarted(overrides?: CallOverrides): Promise<BigNumber>;

    "publicSaleStarted()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCooksList(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCooksList(address[])"(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weiRaised(overrides?: CallOverrides): Promise<BigNumber>;

    "weiRaised()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CAP_PER_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CAP_PER_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CROWDSALE_END_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CROWDSALE_END_TIME()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CROWDSALE_START_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CROWDSALE_START_TIME()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KARMASALE_START_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "KARMASALE_START_TIME()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KARMA_MEMBERSHIP_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "KARMA_MEMBERSHIP_AMOUNT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_CONTRIBUTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MIN_CONTRIBUTION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PUBLICSALE_START_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PUBLICSALE_START_TIME()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROUND_1_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROUND_1_CAP()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROUND_2_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROUND_2_CAP()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROUND_3_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROUND_3_CAP()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAndLockLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addAndLockLiquidity()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contributions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cookslist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cookslist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCurrentRound()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasEnded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasEnded()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOpen()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    karmaSaleStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "karmaSaleStarted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidityLocked()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metacanaToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "metacanaToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    metacanasPerBNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "metacanasPerBNB()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicSaleStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "publicSaleStarted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCooksList(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCooksList(address[])"(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weiRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weiRaised()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
