/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StakeableTokenInterface extends utils.Interface {
  contractName: "StakeableToken";
  functions: {
    "balanceOf(address)": FunctionFragment;
    "getStakers()": FunctionFragment;
    "lastUpdateTime(address)": FunctionFragment;
    "stakeableStrategy()": FunctionFragment;
    "stakers(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "underlying()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getStakers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeableStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeableStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;

  events: {
    "StakeableStrategyUpdated(address,address)": EventFragment;
    "StakedTokens(address,uint256)": EventFragment;
    "WithdrawnTokens(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StakeableStrategyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnTokens"): EventFragment;
}

export type StakeableStrategyUpdatedEvent = TypedEvent<
  [string, string],
  { previousStakeableStrategy: string; newStakeableStrategy: string }
>;

export type StakeableStrategyUpdatedEventFilter =
  TypedEventFilter<StakeableStrategyUpdatedEvent>;

export type StakedTokensEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type StakedTokensEventFilter = TypedEventFilter<StakedTokensEvent>;

export type WithdrawnTokensEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type WithdrawnTokensEventFilter = TypedEventFilter<WithdrawnTokensEvent>;

export interface StakeableToken extends BaseContract {
  contractName: "StakeableToken";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeableTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakers(overrides?: CallOverrides): Promise<[string[]]>;

    lastUpdateTime(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeableStrategy(overrides?: CallOverrides): Promise<[string]>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;
  };

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getStakers(overrides?: CallOverrides): Promise<string[]>;

  lastUpdateTime(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakeableStrategy(overrides?: CallOverrides): Promise<string>;

  stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  underlying(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStakers(overrides?: CallOverrides): Promise<string[]>;

    lastUpdateTime(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeableStrategy(overrides?: CallOverrides): Promise<string>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "StakeableStrategyUpdated(address,address)"(
      previousStakeableStrategy?: string | null,
      newStakeableStrategy?: string | null
    ): StakeableStrategyUpdatedEventFilter;
    StakeableStrategyUpdated(
      previousStakeableStrategy?: string | null,
      newStakeableStrategy?: string | null
    ): StakeableStrategyUpdatedEventFilter;

    "StakedTokens(address,uint256)"(
      user?: string | null,
      amount?: null
    ): StakedTokensEventFilter;
    StakedTokens(user?: string | null, amount?: null): StakedTokensEventFilter;

    "WithdrawnTokens(address,uint256)"(
      user?: string | null,
      amount?: null
    ): WithdrawnTokensEventFilter;
    WithdrawnTokens(
      user?: string | null,
      amount?: null
    ): WithdrawnTokensEventFilter;
  };

  estimateGas: {
    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStakers(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeableStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdateTime(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeableStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
