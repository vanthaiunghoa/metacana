/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MetacanaTokenInterface extends ethers.utils.Interface {
  functions: {
    "WBNB()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "countMetacanas()": FunctionFragment;
    "crunchPool()": FunctionFragment;
    "crunchRate()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getCrunchAmount()": FunctionFragment;
    "getInfoFor(address)": FunctionFragment;
    "getMetacanaStats(address)": FunctionFragment;
    "getMetacanas()": FunctionFragment;
    "githubProof()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isMetacanaTuesday()": FunctionFragment;
    "lastCrunchTime()": FunctionFragment;
    "metacanaTuesdayRewardMultiplier()": FunctionFragment;
    "metacanas(uint256)": FunctionFragment;
    "metacanasCrunchStats(address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pancakeFactory()": FunctionFragment;
    "pancakeswapPool()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardForMetacana()": FunctionFragment;
    "rewardMultiplier()": FunctionFragment;
    "setCrunchRate(uint256)": FunctionFragment;
    "setMetacanaTuesdayRewardMultiplier(uint256)": FunctionFragment;
    "setPancakeswapPool()": FunctionFragment;
    "setRewardForMetacana(uint256)": FunctionFragment;
    "setTwitterProof(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalCrunched()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "twitterProof()": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WBNB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "countMetacanas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crunchPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crunchRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCrunchAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getInfoFor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getMetacanaStats",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetacanas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "githubProof",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isMetacanaTuesday",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastCrunchTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metacanaTuesdayRewardMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metacanas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "metacanasCrunchStats",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pancakeswapPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardForMetacana",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCrunchRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetacanaTuesdayRewardMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPancakeswapPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardForMetacana",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwitterProof",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalCrunched",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "twitterProof",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "WBNB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "countMetacanas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crunchPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crunchRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrunchAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInfoFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMetacanaStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetacanas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "githubProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMetacanaTuesday",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCrunchTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metacanaTuesdayRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metacanas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "metacanasCrunchStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pancakeswapPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardForMetacana",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCrunchRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetacanaTuesdayRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPancakeswapPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardForMetacana",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwitterProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCrunched",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twitterProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PoolCrunched(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCrunched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class MetacanaToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MetacanaTokenInterface;

  functions: {
    WBNB(overrides?: CallOverrides): Promise<[string]>;

    "WBNB()"(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burnFrom(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    countMetacanas(overrides?: CallOverrides): Promise<[BigNumber]>;

    "countMetacanas()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    crunchPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "crunchPool()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crunchRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "crunchRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCrunchAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCrunchAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInfoFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        balance: BigNumber;
        poolBalance: BigNumber;
        totalSupply: BigNumber;
        totalMetacanasCrunched: BigNumber;
        crunchableMetacanas: BigNumber;
        lastCrunchAt: BigNumber;
        timesCrunched: BigNumber;
        metacanasCrunched: BigNumber;
        metacanaTuesday: boolean;
        metacanasCrunchRate: BigNumber;
        metacanaRewardRate: BigNumber;
        metacanaTuesdayMultiplier: BigNumber;
      }
    >;

    "getInfoFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        balance: BigNumber;
        poolBalance: BigNumber;
        totalSupply: BigNumber;
        totalMetacanasCrunched: BigNumber;
        crunchableMetacanas: BigNumber;
        lastCrunchAt: BigNumber;
        timesCrunched: BigNumber;
        metacanasCrunched: BigNumber;
        metacanaTuesday: boolean;
        metacanasCrunchRate: BigNumber;
        metacanaRewardRate: BigNumber;
        metacanaTuesdayMultiplier: BigNumber;
      }
    >;

    getMetacanaStats(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        timesCrunched: BigNumber;
        metacanasCrunched: BigNumber;
      }
    >;

    "getMetacanaStats(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        timesCrunched: BigNumber;
        metacanasCrunched: BigNumber;
      }
    >;

    getMetacanas(overrides?: CallOverrides): Promise<[string[]]>;

    "getMetacanas()"(overrides?: CallOverrides): Promise<[string[]]>;

    githubProof(overrides?: CallOverrides): Promise<[string]>;

    "githubProof()"(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isMetacanaTuesday(overrides?: CallOverrides): Promise<[boolean]>;

    "isMetacanaTuesday()"(overrides?: CallOverrides): Promise<[boolean]>;

    lastCrunchTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastCrunchTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    metacanaTuesdayRewardMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "metacanaTuesdayRewardMultiplier()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    metacanas(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "metacanas(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    metacanasCrunchStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        timesCrunched: BigNumber;
        metacanasCrunched: BigNumber;
      }
    >;

    "metacanasCrunchStats(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        timesCrunched: BigNumber;
        metacanasCrunched: BigNumber;
      }
    >;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pancakeFactory(overrides?: CallOverrides): Promise<[string]>;

    "pancakeFactory()"(overrides?: CallOverrides): Promise<[string]>;

    pancakeswapPool(overrides?: CallOverrides): Promise<[string]>;

    "pancakeswapPool()"(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardForMetacana(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardForMetacana()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardMultiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCrunchRate(
      _crunchRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCrunchRate(uint256)"(
      _crunchRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMetacanaTuesdayRewardMultiplier(
      _metacanaTuesdayRewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMetacanaTuesdayRewardMultiplier(uint256)"(
      _metacanaTuesdayRewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPancakeswapPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPancakeswapPool()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardForMetacana(
      _rewardForMetacana: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRewardForMetacana(uint256)"(
      _rewardForMetacana: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTwitterProof(
      _twitterProof: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTwitterProof(uint256)"(
      _twitterProof: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalCrunched(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalCrunched()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    twitterProof(overrides?: CallOverrides): Promise<[BigNumber]>;

    "twitterProof()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  WBNB(overrides?: CallOverrides): Promise<string>;

  "WBNB()"(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burnFrom(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  countMetacanas(overrides?: CallOverrides): Promise<BigNumber>;

  "countMetacanas()"(overrides?: CallOverrides): Promise<BigNumber>;

  crunchPool(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "crunchPool()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crunchRate(overrides?: CallOverrides): Promise<BigNumber>;

  "crunchRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCrunchAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "getCrunchAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getInfoFor(
    addr: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      balance: BigNumber;
      poolBalance: BigNumber;
      totalSupply: BigNumber;
      totalMetacanasCrunched: BigNumber;
      crunchableMetacanas: BigNumber;
      lastCrunchAt: BigNumber;
      timesCrunched: BigNumber;
      metacanasCrunched: BigNumber;
      metacanaTuesday: boolean;
      metacanasCrunchRate: BigNumber;
      metacanaRewardRate: BigNumber;
      metacanaTuesdayMultiplier: BigNumber;
    }
  >;

  "getInfoFor(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      balance: BigNumber;
      poolBalance: BigNumber;
      totalSupply: BigNumber;
      totalMetacanasCrunched: BigNumber;
      crunchableMetacanas: BigNumber;
      lastCrunchAt: BigNumber;
      timesCrunched: BigNumber;
      metacanasCrunched: BigNumber;
      metacanaTuesday: boolean;
      metacanasCrunchRate: BigNumber;
      metacanaRewardRate: BigNumber;
      metacanaTuesdayMultiplier: BigNumber;
    }
  >;

  getMetacanaStats(
    _address: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      timesCrunched: BigNumber;
      metacanasCrunched: BigNumber;
    }
  >;

  "getMetacanaStats(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      timesCrunched: BigNumber;
      metacanasCrunched: BigNumber;
    }
  >;

  getMetacanas(overrides?: CallOverrides): Promise<string[]>;

  "getMetacanas()"(overrides?: CallOverrides): Promise<string[]>;

  githubProof(overrides?: CallOverrides): Promise<string>;

  "githubProof()"(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isMetacanaTuesday(overrides?: CallOverrides): Promise<boolean>;

  "isMetacanaTuesday()"(overrides?: CallOverrides): Promise<boolean>;

  lastCrunchTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastCrunchTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  metacanaTuesdayRewardMultiplier(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "metacanaTuesdayRewardMultiplier()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  metacanas(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "metacanas(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  metacanasCrunchStats(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      timesCrunched: BigNumber;
      metacanasCrunched: BigNumber;
    }
  >;

  "metacanasCrunchStats(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      timesCrunched: BigNumber;
      metacanasCrunched: BigNumber;
    }
  >;

  mint(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pancakeFactory(overrides?: CallOverrides): Promise<string>;

  "pancakeFactory()"(overrides?: CallOverrides): Promise<string>;

  pancakeswapPool(overrides?: CallOverrides): Promise<string>;

  "pancakeswapPool()"(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardForMetacana(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardForMetacana()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  setCrunchRate(
    _crunchRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCrunchRate(uint256)"(
    _crunchRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMetacanaTuesdayRewardMultiplier(
    _metacanaTuesdayRewardMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMetacanaTuesdayRewardMultiplier(uint256)"(
    _metacanaTuesdayRewardMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPancakeswapPool(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPancakeswapPool()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardForMetacana(
    _rewardForMetacana: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRewardForMetacana(uint256)"(
    _rewardForMetacana: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTwitterProof(
    _twitterProof: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTwitterProof(uint256)"(
    _twitterProof: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalCrunched(overrides?: CallOverrides): Promise<BigNumber>;

  "totalCrunched()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  twitterProof(overrides?: CallOverrides): Promise<BigNumber>;

  "twitterProof()"(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WBNB(overrides?: CallOverrides): Promise<string>;

    "WBNB()"(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burn(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnFrom(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    countMetacanas(overrides?: CallOverrides): Promise<BigNumber>;

    "countMetacanas()"(overrides?: CallOverrides): Promise<BigNumber>;

    crunchPool(overrides?: CallOverrides): Promise<void>;

    "crunchPool()"(overrides?: CallOverrides): Promise<void>;

    crunchRate(overrides?: CallOverrides): Promise<BigNumber>;

    "crunchRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCrunchAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getCrunchAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInfoFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        balance: BigNumber;
        poolBalance: BigNumber;
        totalSupply: BigNumber;
        totalMetacanasCrunched: BigNumber;
        crunchableMetacanas: BigNumber;
        lastCrunchAt: BigNumber;
        timesCrunched: BigNumber;
        metacanasCrunched: BigNumber;
        metacanaTuesday: boolean;
        metacanasCrunchRate: BigNumber;
        metacanaRewardRate: BigNumber;
        metacanaTuesdayMultiplier: BigNumber;
      }
    >;

    "getInfoFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        balance: BigNumber;
        poolBalance: BigNumber;
        totalSupply: BigNumber;
        totalMetacanasCrunched: BigNumber;
        crunchableMetacanas: BigNumber;
        lastCrunchAt: BigNumber;
        timesCrunched: BigNumber;
        metacanasCrunched: BigNumber;
        metacanaTuesday: boolean;
        metacanasCrunchRate: BigNumber;
        metacanaRewardRate: BigNumber;
        metacanaTuesdayMultiplier: BigNumber;
      }
    >;

    getMetacanaStats(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        timesCrunched: BigNumber;
        metacanasCrunched: BigNumber;
      }
    >;

    "getMetacanaStats(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        timesCrunched: BigNumber;
        metacanasCrunched: BigNumber;
      }
    >;

    getMetacanas(overrides?: CallOverrides): Promise<string[]>;

    "getMetacanas()"(overrides?: CallOverrides): Promise<string[]>;

    githubProof(overrides?: CallOverrides): Promise<string>;

    "githubProof()"(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMetacanaTuesday(overrides?: CallOverrides): Promise<boolean>;

    "isMetacanaTuesday()"(overrides?: CallOverrides): Promise<boolean>;

    lastCrunchTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastCrunchTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    metacanaTuesdayRewardMultiplier(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "metacanaTuesdayRewardMultiplier()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metacanas(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "metacanas(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    metacanasCrunchStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        timesCrunched: BigNumber;
        metacanasCrunched: BigNumber;
      }
    >;

    "metacanasCrunchStats(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        timesCrunched: BigNumber;
        metacanasCrunched: BigNumber;
      }
    >;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pancakeFactory(overrides?: CallOverrides): Promise<string>;

    "pancakeFactory()"(overrides?: CallOverrides): Promise<string>;

    pancakeswapPool(overrides?: CallOverrides): Promise<string>;

    "pancakeswapPool()"(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardForMetacana(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardForMetacana()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCrunchRate(
      _crunchRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCrunchRate(uint256)"(
      _crunchRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetacanaTuesdayRewardMultiplier(
      _metacanaTuesdayRewardMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMetacanaTuesdayRewardMultiplier(uint256)"(
      _metacanaTuesdayRewardMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPancakeswapPool(overrides?: CallOverrides): Promise<void>;

    "setPancakeswapPool()"(overrides?: CallOverrides): Promise<void>;

    setRewardForMetacana(
      _rewardForMetacana: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardForMetacana(uint256)"(
      _rewardForMetacana: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTwitterProof(
      _twitterProof: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTwitterProof(uint256)"(
      _twitterProof: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalCrunched(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCrunched()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    twitterProof(overrides?: CallOverrides): Promise<BigNumber>;

    "twitterProof()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account: null): TypedEventFilter<[string], { account: string }>;

    PoolCrunched(
      metacana: null,
      crunchedAmount: null,
      newTotalSupply: null,
      newPancakeswapPool: null,
      metacanaReward: null,
      timesCrunched: null,
      totalMetacanasCrunched: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        metacana: string;
        crunchedAmount: BigNumber;
        newTotalSupply: BigNumber;
        newPancakeswapPool: BigNumber;
        metacanaReward: BigNumber;
        timesCrunched: BigNumber;
        totalMetacanasCrunched: BigNumber;
      }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Unpaused(account: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    WBNB(overrides?: CallOverrides): Promise<BigNumber>;

    "WBNB()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burn(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burnFrom(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    countMetacanas(overrides?: CallOverrides): Promise<BigNumber>;

    "countMetacanas()"(overrides?: CallOverrides): Promise<BigNumber>;

    crunchPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "crunchPool()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crunchRate(overrides?: CallOverrides): Promise<BigNumber>;

    "crunchRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCrunchAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getCrunchAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInfoFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getInfoFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetacanaStats(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMetacanaStats(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetacanas(overrides?: CallOverrides): Promise<BigNumber>;

    "getMetacanas()"(overrides?: CallOverrides): Promise<BigNumber>;

    githubProof(overrides?: CallOverrides): Promise<BigNumber>;

    "githubProof()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isMetacanaTuesday(overrides?: CallOverrides): Promise<BigNumber>;

    "isMetacanaTuesday()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastCrunchTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastCrunchTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    metacanaTuesdayRewardMultiplier(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "metacanaTuesdayRewardMultiplier()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metacanas(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "metacanas(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metacanasCrunchStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "metacanasCrunchStats(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "pancakeFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeswapPool(overrides?: CallOverrides): Promise<BigNumber>;

    "pancakeswapPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardForMetacana(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardForMetacana()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCrunchRate(
      _crunchRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCrunchRate(uint256)"(
      _crunchRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMetacanaTuesdayRewardMultiplier(
      _metacanaTuesdayRewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMetacanaTuesdayRewardMultiplier(uint256)"(
      _metacanaTuesdayRewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPancakeswapPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPancakeswapPool()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardForMetacana(
      _rewardForMetacana: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRewardForMetacana(uint256)"(
      _rewardForMetacana: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTwitterProof(
      _twitterProof: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTwitterProof(uint256)"(
      _twitterProof: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalCrunched(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCrunched()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    twitterProof(overrides?: CallOverrides): Promise<BigNumber>;

    "twitterProof()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WBNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WBNB()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burn(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burnFrom(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    countMetacanas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "countMetacanas()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crunchPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "crunchPool()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crunchRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "crunchRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCrunchAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCrunchAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInfoFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInfoFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetacanaStats(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMetacanaStats(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetacanas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMetacanas()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    githubProof(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "githubProof()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isMetacanaTuesday(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isMetacanaTuesday()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastCrunchTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastCrunchTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metacanaTuesdayRewardMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "metacanaTuesdayRewardMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metacanas(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "metacanas(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metacanasCrunchStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "metacanasCrunchStats(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pancakeFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pancakeswapPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pancakeswapPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardForMetacana(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardForMetacana()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCrunchRate(
      _crunchRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCrunchRate(uint256)"(
      _crunchRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMetacanaTuesdayRewardMultiplier(
      _metacanaTuesdayRewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMetacanaTuesdayRewardMultiplier(uint256)"(
      _metacanaTuesdayRewardMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPancakeswapPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPancakeswapPool()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardForMetacana(
      _rewardForMetacana: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRewardForMetacana(uint256)"(
      _rewardForMetacana: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTwitterProof(
      _twitterProof: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTwitterProof(uint256)"(
      _twitterProof: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCrunched(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalCrunched()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    twitterProof(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "twitterProof()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
