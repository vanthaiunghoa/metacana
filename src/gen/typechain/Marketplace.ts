/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MarketplaceInterface extends utils.Interface {
  contractName: "Marketplace";
  functions: {
    "feeToAddress()": FunctionFragment;
    "getMessageHash(address,uint256,address,uint256,uint256)": FunctionFragment;
    "ignoreSignature(address[2],uint256[3],bytes)": FunctionFragment;
    "matchTransaction(address[3],uint256[4],bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentTokens(address)": FunctionFragment;
    "removePaymentTokens(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeToAddress(address)": FunctionFragment;
    "setPaymentTokens(address[])": FunctionFragment;
    "setTransactionFee(uint256)": FunctionFragment;
    "transactionFee()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usedSignatures(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "feeToAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ignoreSignature",
    values: [
      [string, string],
      [BigNumberish, BigNumberish, BigNumberish],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "matchTransaction",
    values: [
      [string, string, string],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePaymentTokens",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeToAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentTokens",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransactionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usedSignatures",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "feeToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ignoreSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePaymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransactionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedSignatures",
    data: BytesLike
  ): Result;

  events: {
    "MatchTransaction(uint256,address,uint256,address,address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MatchTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type MatchTransactionEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, string, BigNumber, BigNumber],
  {
    tokenId: BigNumber;
    contractAddress: string;
    price: BigNumber;
    paymentToken: string;
    seller: string;
    buyer: string;
    amount: BigNumber;
    fee: BigNumber;
  }
>;

export type MatchTransactionEventFilter =
  TypedEventFilter<MatchTransactionEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Marketplace extends BaseContract {
  contractName: "Marketplace";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    feeToAddress(overrides?: CallOverrides): Promise<[string]>;

    getMessageHash(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _paymentErc20: string,
      _price: BigNumberish,
      _saltNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ignoreSignature(
      addresses: [string, string],
      values: [BigNumberish, BigNumberish, BigNumberish],
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    matchTransaction(
      addresses: [string, string, string],
      values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    removePaymentTokens(
      _removedPaymentTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeToAddress(
      _feeToAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaymentTokens(
      _paymentTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransactionFee(
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transactionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usedSignatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  feeToAddress(overrides?: CallOverrides): Promise<string>;

  getMessageHash(
    _nftAddress: string,
    _tokenId: BigNumberish,
    _paymentErc20: string,
    _price: BigNumberish,
    _saltNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  ignoreSignature(
    addresses: [string, string],
    values: [BigNumberish, BigNumberish, BigNumberish],
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  matchTransaction(
    addresses: [string, string, string],
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  removePaymentTokens(
    _removedPaymentTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeToAddress(
    _feeToAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaymentTokens(
    _paymentTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransactionFee(
    _transactionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transactionFee(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usedSignatures(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    feeToAddress(overrides?: CallOverrides): Promise<string>;

    getMessageHash(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _paymentErc20: string,
      _price: BigNumberish,
      _saltNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    ignoreSignature(
      addresses: [string, string],
      values: [BigNumberish, BigNumberish, BigNumberish],
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    matchTransaction(
      addresses: [string, string, string],
      values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    removePaymentTokens(
      _removedPaymentTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFeeToAddress(
      _feeToAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentTokens(
      _paymentTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTransactionFee(
      _transactionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transactionFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usedSignatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "MatchTransaction(uint256,address,uint256,address,address,address,uint256,uint256)"(
      tokenId?: BigNumberish | null,
      contractAddress?: null,
      price?: null,
      paymentToken?: null,
      seller?: null,
      buyer?: null,
      amount?: null,
      fee?: null
    ): MatchTransactionEventFilter;
    MatchTransaction(
      tokenId?: BigNumberish | null,
      contractAddress?: null,
      price?: null,
      paymentToken?: null,
      seller?: null,
      buyer?: null,
      amount?: null,
      fee?: null
    ): MatchTransactionEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    feeToAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getMessageHash(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _paymentErc20: string,
      _price: BigNumberish,
      _saltNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ignoreSignature(
      addresses: [string, string],
      values: [BigNumberish, BigNumberish, BigNumberish],
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    matchTransaction(
      addresses: [string, string, string],
      values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removePaymentTokens(
      _removedPaymentTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeToAddress(
      _feeToAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaymentTokens(
      _paymentTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransactionFee(
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transactionFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usedSignatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feeToAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMessageHash(
      _nftAddress: string,
      _tokenId: BigNumberish,
      _paymentErc20: string,
      _price: BigNumberish,
      _saltNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ignoreSignature(
      addresses: [string, string],
      values: [BigNumberish, BigNumberish, BigNumberish],
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    matchTransaction(
      addresses: [string, string, string],
      values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removePaymentTokens(
      _removedPaymentTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeToAddress(
      _feeToAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentTokens(
      _paymentTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransactionFee(
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transactionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usedSignatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
