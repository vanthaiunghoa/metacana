/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface NFTStakeablePoolInterface extends utils.Interface {
  contractName: "NFTStakeablePool";
  functions: {
    "addNFT(uint256,uint256,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "denyList(address)": FunctionFragment;
    "earnedPoints(address)": FunctionFragment;
    "exit()": FunctionFragment;
    "getStakers()": FunctionFragment;
    "lastUpdateTime(address)": FunctionFragment;
    "maximumStake()": FunctionFragment;
    "nfts(uint256)": FunctionFragment;
    "nftsContract()": FunctionFragment;
    "owner()": FunctionFragment;
    "points(address)": FunctionFragment;
    "poolName()": FunctionFragment;
    "recover(address,uint256)": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMaximumStake(uint256)": FunctionFragment;
    "setStakeableStrategy(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeableStrategy()": FunctionFragment;
    "stakers(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlying()": FunctionFragment;
    "updateNFTStrategy(uint256,address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addNFT",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "denyList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "earnedPoints",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "exit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStakers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nfts", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nftsContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "points", values: [string]): string;
  encodeFunctionData(functionFragment: "poolName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeableStrategy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeableStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateNFTStrategy",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "denyList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "earnedPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nfts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "points", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeableStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeableStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateNFTStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "NFTAdded(uint256,uint256,address,address)": EventFragment;
    "NFTRedeemed(address,uint256)": EventFragment;
    "NFTStrategyUpdated(uint256,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StakeableStrategyUpdated(address,address)": EventFragment;
    "StakedTokens(address,uint256)": EventFragment;
    "WithdrawnTokens(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTStrategyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeableStrategyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnTokens"): EventFragment;
}

export type NFTAddedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  {
    nftId: BigNumber;
    pointsToRedeem: BigNumber;
    strategyAddress: string;
    creator: string;
  }
>;

export type NFTAddedEventFilter = TypedEventFilter<NFTAddedEvent>;

export type NFTRedeemedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type NFTRedeemedEventFilter = TypedEventFilter<NFTRedeemedEvent>;

export type NFTStrategyUpdatedEvent = TypedEvent<
  [BigNumber, string, string],
  { nftId: BigNumber; previousStrategy: string; newStrategy: string }
>;

export type NFTStrategyUpdatedEventFilter =
  TypedEventFilter<NFTStrategyUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type StakeableStrategyUpdatedEvent = TypedEvent<
  [string, string],
  { previousStakeableStrategy: string; newStakeableStrategy: string }
>;

export type StakeableStrategyUpdatedEventFilter =
  TypedEventFilter<StakeableStrategyUpdatedEvent>;

export type StakedTokensEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type StakedTokensEventFilter = TypedEventFilter<StakedTokensEvent>;

export type WithdrawnTokensEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type WithdrawnTokensEventFilter = TypedEventFilter<WithdrawnTokensEvent>;

export interface NFTStakeablePool extends BaseContract {
  contractName: "NFTStakeablePool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTStakeablePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNFT(
      nftId: BigNumberish,
      pointsToRedeem: BigNumberish,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    denyList(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    earnedPoints(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStakers(overrides?: CallOverrides): Promise<[string[]]>;

    lastUpdateTime(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maximumStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        strategy: string;
        pointsToRedeem: BigNumber;
        creator: string;
      }
    >;

    nftsContract(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    points(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    poolName(overrides?: CallOverrides): Promise<[string]>;

    recover(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaximumStake(
      _stakeSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakeableStrategy(
      _stakeableStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeableStrategy(overrides?: CallOverrides): Promise<[string]>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    updateNFTStrategy(
      nftId: BigNumberish,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addNFT(
    nftId: BigNumberish,
    pointsToRedeem: BigNumberish,
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  denyList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  earnedPoints(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  exit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStakers(overrides?: CallOverrides): Promise<string[]>;

  lastUpdateTime(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maximumStake(overrides?: CallOverrides): Promise<BigNumber>;

  nfts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      strategy: string;
      pointsToRedeem: BigNumber;
      creator: string;
    }
  >;

  nftsContract(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  poolName(overrides?: CallOverrides): Promise<string>;

  recover(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaximumStake(
    _stakeSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakeableStrategy(
    _stakeableStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeableStrategy(overrides?: CallOverrides): Promise<string>;

  stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  updateNFTStrategy(
    nftId: BigNumberish,
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addNFT(
      nftId: BigNumberish,
      pointsToRedeem: BigNumberish,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    denyList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    earnedPoints(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(overrides?: CallOverrides): Promise<void>;

    getStakers(overrides?: CallOverrides): Promise<string[]>;

    lastUpdateTime(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maximumStake(overrides?: CallOverrides): Promise<BigNumber>;

    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        strategy: string;
        pointsToRedeem: BigNumber;
        creator: string;
      }
    >;

    nftsContract(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolName(overrides?: CallOverrides): Promise<string>;

    recover(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(nftId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMaximumStake(
      _stakeSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakeableStrategy(
      _stakeableStrategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeableStrategy(overrides?: CallOverrides): Promise<string>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    updateNFTStrategy(
      nftId: BigNumberish,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NFTAdded(uint256,uint256,address,address)"(
      nftId?: BigNumberish | null,
      pointsToRedeem?: BigNumberish | null,
      strategyAddress?: string | null,
      creator?: null
    ): NFTAddedEventFilter;
    NFTAdded(
      nftId?: BigNumberish | null,
      pointsToRedeem?: BigNumberish | null,
      strategyAddress?: string | null,
      creator?: null
    ): NFTAddedEventFilter;

    "NFTRedeemed(address,uint256)"(
      user?: string | null,
      amount?: null
    ): NFTRedeemedEventFilter;
    NFTRedeemed(user?: string | null, amount?: null): NFTRedeemedEventFilter;

    "NFTStrategyUpdated(uint256,address,address)"(
      nftId?: BigNumberish | null,
      previousStrategy?: string | null,
      newStrategy?: string | null
    ): NFTStrategyUpdatedEventFilter;
    NFTStrategyUpdated(
      nftId?: BigNumberish | null,
      previousStrategy?: string | null,
      newStrategy?: string | null
    ): NFTStrategyUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "StakeableStrategyUpdated(address,address)"(
      previousStakeableStrategy?: string | null,
      newStakeableStrategy?: string | null
    ): StakeableStrategyUpdatedEventFilter;
    StakeableStrategyUpdated(
      previousStakeableStrategy?: string | null,
      newStakeableStrategy?: string | null
    ): StakeableStrategyUpdatedEventFilter;

    "StakedTokens(address,uint256)"(
      user?: string | null,
      amount?: null
    ): StakedTokensEventFilter;
    StakedTokens(user?: string | null, amount?: null): StakedTokensEventFilter;

    "WithdrawnTokens(address,uint256)"(
      user?: string | null,
      amount?: null
    ): WithdrawnTokensEventFilter;
    WithdrawnTokens(
      user?: string | null,
      amount?: null
    ): WithdrawnTokensEventFilter;
  };

  estimateGas: {
    addNFT(
      nftId: BigNumberish,
      pointsToRedeem: BigNumberish,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    denyList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    earnedPoints(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStakers(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maximumStake(overrides?: CallOverrides): Promise<BigNumber>;

    nfts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nftsContract(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolName(overrides?: CallOverrides): Promise<BigNumber>;

    recover(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaximumStake(
      _stakeSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakeableStrategy(
      _stakeableStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeableStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    updateNFTStrategy(
      nftId: BigNumberish,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNFT(
      nftId: BigNumberish,
      pointsToRedeem: BigNumberish,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    denyList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earnedPoints(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStakers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdateTime(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maximumStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftsContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    points(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recover(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaximumStake(
      _stakeSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakeableStrategy(
      _stakeableStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeableStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateNFTStrategy(
      nftId: BigNumberish,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
