/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TokenVestingPoolInterface extends ethers.utils.Interface {
  functions: {
    "addBeneficiary(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "beneficiaries(uint256)": FunctionFragment;
    "beneficiaryDistributionContracts(address,uint256)": FunctionFragment;
    "distributedTokens()": FunctionFragment;
    "getDistributionContracts(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "token()": FunctionFragment;
    "totalFunds()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBeneficiary",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryDistributionContracts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionContracts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryDistributionContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BeneficiaryAdded(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BeneficiaryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class TokenVestingPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenVestingPoolInterface;

  functions: {
    addBeneficiary(
      _beneficiary: string,
      _lockDurationAfterTge: BigNumberish,
      _unlockTokenPercentAfterTge: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addBeneficiary(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _beneficiary: string,
      _lockDurationAfterTge: BigNumberish,
      _unlockTokenPercentAfterTge: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beneficiaries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "beneficiaries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    beneficiaryDistributionContracts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "beneficiaryDistributionContracts(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    distributedTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    "distributedTokens()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDistributionContracts(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getDistributionContracts(address)"(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    totalFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalFunds()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBeneficiary(
    _beneficiary: string,
    _lockDurationAfterTge: BigNumberish,
    _unlockTokenPercentAfterTge: BigNumberish,
    _start: BigNumberish,
    _cliff: BigNumberish,
    _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
    _duration: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addBeneficiary(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
    _beneficiary: string,
    _lockDurationAfterTge: BigNumberish,
    _unlockTokenPercentAfterTge: BigNumberish,
    _start: BigNumberish,
    _cliff: BigNumberish,
    _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
    _duration: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beneficiaries(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "beneficiaries(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  beneficiaryDistributionContracts(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "beneficiaryDistributionContracts(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  distributedTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "distributedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDistributionContracts(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getDistributionContracts(address)"(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalFunds(overrides?: CallOverrides): Promise<BigNumber>;

  "totalFunds()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBeneficiary(
      _beneficiary: string,
      _lockDurationAfterTge: BigNumberish,
      _unlockTokenPercentAfterTge: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "addBeneficiary(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _beneficiary: string,
      _lockDurationAfterTge: BigNumberish,
      _unlockTokenPercentAfterTge: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    beneficiaries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "beneficiaries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    beneficiaryDistributionContracts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "beneficiaryDistributionContracts(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    distributedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "distributedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionContracts(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getDistributionContracts(address)"(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalFunds(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFunds()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BeneficiaryAdded(
      beneficiary: string | null,
      vesting: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { beneficiary: string; vesting: string; amount: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addBeneficiary(
      _beneficiary: string,
      _lockDurationAfterTge: BigNumberish,
      _unlockTokenPercentAfterTge: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addBeneficiary(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _beneficiary: string,
      _lockDurationAfterTge: BigNumberish,
      _unlockTokenPercentAfterTge: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beneficiaries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "beneficiaries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beneficiaryDistributionContracts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "beneficiaryDistributionContracts(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "distributedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionContracts(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDistributionContracts(address)"(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalFunds(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFunds()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBeneficiary(
      _beneficiary: string,
      _lockDurationAfterTge: BigNumberish,
      _unlockTokenPercentAfterTge: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addBeneficiary(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _beneficiary: string,
      _lockDurationAfterTge: BigNumberish,
      _unlockTokenPercentAfterTge: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beneficiaries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "beneficiaries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beneficiaryDistributionContracts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "beneficiaryDistributionContracts(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "distributedTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributionContracts(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDistributionContracts(address)"(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalFunds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
