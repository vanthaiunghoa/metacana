/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RewardFactoryInterface extends utils.Interface {
  contractName: "RewardFactory";
  functions: {
    "PERIOD_LENGTH()": FunctionFragment;
    "assignOwnership(address,uint256)": FunctionFragment;
    "disableMint(uint256[])": FunctionFragment;
    "enableMint(uint256[])": FunctionFragment;
    "getAvailableSupply()": FunctionFragment;
    "getMetacanaAssets()": FunctionFragment;
    "getOwnerTier(address)": FunctionFragment;
    "livePeriod()": FunctionFragment;
    "metacanaAssets()": FunctionFragment;
    "mintBatch(address,uint256[],uint256[],bytes)": FunctionFragment;
    "mintWhitelist(uint256)": FunctionFragment;
    "periodMintLimit()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updatePeriodMintLimit(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PERIOD_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assignOwnership",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableMint",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enableMint",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMetacanaAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerTier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "livePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metacanaAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWhitelist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodMintLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePeriodMintLimit",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "PERIOD_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enableMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetacanaAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "livePeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "metacanaAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodMintLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePeriodMintLimit",
    data: BytesLike
  ): Result;

  events: {
    "AssetsDisabled(uint256[])": EventFragment;
    "AssetsEnabled(uint256[])": EventFragment;
    "OwnershipGranted(address,uint256,uint256)": EventFragment;
    "PeriodMintLimitChanged(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetsDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetsEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodMintLimitChanged"): EventFragment;
}

export type AssetsDisabledEvent = TypedEvent<
  [BigNumber[]],
  { disabledIds: BigNumber[] }
>;

export type AssetsDisabledEventFilter = TypedEventFilter<AssetsDisabledEvent>;

export type AssetsEnabledEvent = TypedEvent<
  [BigNumber[]],
  { enabledIds: BigNumber[] }
>;

export type AssetsEnabledEventFilter = TypedEventFilter<AssetsEnabledEvent>;

export type OwnershipGrantedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { owner: string; previousTier: BigNumber; newTier: BigNumber }
>;

export type OwnershipGrantedEventFilter =
  TypedEventFilter<OwnershipGrantedEvent>;

export type PeriodMintLimitChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldMintingLimit: BigNumber; newMintingLimit: BigNumber }
>;

export type PeriodMintLimitChangedEventFilter =
  TypedEventFilter<PeriodMintLimitChangedEvent>;

export interface RewardFactory extends BaseContract {
  contractName: "RewardFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PERIOD_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableMint(
      _disabledIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableMint(
      _enabledIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAvailableSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMetacanaAssets(overrides?: CallOverrides): Promise<[string]>;

    getOwnerTier(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    livePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    metacanaAssets(overrides?: CallOverrides): Promise<[string]>;

    mintBatch(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWhitelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    periodMintLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updatePeriodMintLimit(
      _newPeriodMintLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PERIOD_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  assignOwnership(
    _address: string,
    _tier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableMint(
    _disabledIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableMint(
    _enabledIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAvailableSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getMetacanaAssets(overrides?: CallOverrides): Promise<string>;

  getOwnerTier(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  livePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  metacanaAssets(overrides?: CallOverrides): Promise<string>;

  mintBatch(
    _to: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWhitelist(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  periodMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updatePeriodMintLimit(
    _newPeriodMintLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PERIOD_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disableMint(
      _disabledIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    enableMint(
      _enabledIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAvailableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getMetacanaAssets(overrides?: CallOverrides): Promise<string>;

    getOwnerTier(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    livePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    metacanaAssets(overrides?: CallOverrides): Promise<string>;

    mintBatch(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    mintWhitelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    periodMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePeriodMintLimit(
      _newPeriodMintLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetsDisabled(uint256[])"(disabledIds?: null): AssetsDisabledEventFilter;
    AssetsDisabled(disabledIds?: null): AssetsDisabledEventFilter;

    "AssetsEnabled(uint256[])"(enabledIds?: null): AssetsEnabledEventFilter;
    AssetsEnabled(enabledIds?: null): AssetsEnabledEventFilter;

    "OwnershipGranted(address,uint256,uint256)"(
      owner?: string | null,
      previousTier?: BigNumberish | null,
      newTier?: BigNumberish | null
    ): OwnershipGrantedEventFilter;
    OwnershipGranted(
      owner?: string | null,
      previousTier?: BigNumberish | null,
      newTier?: BigNumberish | null
    ): OwnershipGrantedEventFilter;

    "PeriodMintLimitChanged(uint256,uint256)"(
      oldMintingLimit?: null,
      newMintingLimit?: null
    ): PeriodMintLimitChangedEventFilter;
    PeriodMintLimitChanged(
      oldMintingLimit?: null,
      newMintingLimit?: null
    ): PeriodMintLimitChangedEventFilter;
  };

  estimateGas: {
    PERIOD_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableMint(
      _disabledIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableMint(
      _enabledIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAvailableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getMetacanaAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnerTier(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    livePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    metacanaAssets(overrides?: CallOverrides): Promise<BigNumber>;

    mintBatch(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWhitelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodMintLimit(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePeriodMintLimit(
      _newPeriodMintLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PERIOD_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assignOwnership(
      _address: string,
      _tier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableMint(
      _disabledIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableMint(
      _enabledIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAvailableSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetacanaAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwnerTier(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    livePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    metacanaAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintBatch(
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWhitelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodMintLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePeriodMintLimit(
      _newPeriodMintLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
