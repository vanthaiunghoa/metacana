/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ExposedRedeemableNFTInterface extends utils.Interface {
  contractName: "ExposedRedeemableNFT";
  functions: {
    "addNFT(uint256,uint256,address)": FunctionFragment;
    "increasePoints(address,uint256)": FunctionFragment;
    "nfts(uint256)": FunctionFragment;
    "nftsContract()": FunctionFragment;
    "points(address)": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "updateNFTStrategy(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addNFT",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePoints",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nfts", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nftsContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "points", values: [string]): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNFTStrategy",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "addNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increasePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nfts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "points", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateNFTStrategy",
    data: BytesLike
  ): Result;

  events: {
    "NFTAdded(uint256,uint256,address,address)": EventFragment;
    "NFTRedeemed(address,uint256)": EventFragment;
    "NFTStrategyUpdated(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTStrategyUpdated"): EventFragment;
}

export type NFTAddedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  {
    nftId: BigNumber;
    pointsToRedeem: BigNumber;
    strategyAddress: string;
    creator: string;
  }
>;

export type NFTAddedEventFilter = TypedEventFilter<NFTAddedEvent>;

export type NFTRedeemedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type NFTRedeemedEventFilter = TypedEventFilter<NFTRedeemedEvent>;

export type NFTStrategyUpdatedEvent = TypedEvent<
  [BigNumber, string, string],
  { nftId: BigNumber; previousStrategy: string; newStrategy: string }
>;

export type NFTStrategyUpdatedEventFilter =
  TypedEventFilter<NFTStrategyUpdatedEvent>;

export interface ExposedRedeemableNFT extends BaseContract {
  contractName: "ExposedRedeemableNFT";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExposedRedeemableNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNFT(
      nftId: BigNumberish,
      pointsToRedeem: BigNumberish,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increasePoints(
      account: string,
      pointsToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        strategy: string;
        pointsToRedeem: BigNumber;
        creator: string;
      }
    >;

    nftsContract(overrides?: CallOverrides): Promise<[string]>;

    points(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateNFTStrategy(
      nftId: BigNumberish,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addNFT(
    nftId: BigNumberish,
    pointsToRedeem: BigNumberish,
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increasePoints(
    account: string,
    pointsToAdd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nfts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      strategy: string;
      pointsToRedeem: BigNumber;
      creator: string;
    }
  >;

  nftsContract(overrides?: CallOverrides): Promise<string>;

  points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    nftId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateNFTStrategy(
    nftId: BigNumberish,
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addNFT(
      nftId: BigNumberish,
      pointsToRedeem: BigNumberish,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    increasePoints(
      account: string,
      pointsToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        strategy: string;
        pointsToRedeem: BigNumber;
        creator: string;
      }
    >;

    nftsContract(overrides?: CallOverrides): Promise<string>;

    points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    redeem(nftId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateNFTStrategy(
      nftId: BigNumberish,
      strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NFTAdded(uint256,uint256,address,address)"(
      nftId?: BigNumberish | null,
      pointsToRedeem?: BigNumberish | null,
      strategyAddress?: string | null,
      creator?: null
    ): NFTAddedEventFilter;
    NFTAdded(
      nftId?: BigNumberish | null,
      pointsToRedeem?: BigNumberish | null,
      strategyAddress?: string | null,
      creator?: null
    ): NFTAddedEventFilter;

    "NFTRedeemed(address,uint256)"(
      user?: string | null,
      amount?: null
    ): NFTRedeemedEventFilter;
    NFTRedeemed(user?: string | null, amount?: null): NFTRedeemedEventFilter;

    "NFTStrategyUpdated(uint256,address,address)"(
      nftId?: BigNumberish | null,
      previousStrategy?: string | null,
      newStrategy?: string | null
    ): NFTStrategyUpdatedEventFilter;
    NFTStrategyUpdated(
      nftId?: BigNumberish | null,
      previousStrategy?: string | null,
      newStrategy?: string | null
    ): NFTStrategyUpdatedEventFilter;
  };

  estimateGas: {
    addNFT(
      nftId: BigNumberish,
      pointsToRedeem: BigNumberish,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increasePoints(
      account: string,
      pointsToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nfts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nftsContract(overrides?: CallOverrides): Promise<BigNumber>;

    points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateNFTStrategy(
      nftId: BigNumberish,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNFT(
      nftId: BigNumberish,
      pointsToRedeem: BigNumberish,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increasePoints(
      account: string,
      pointsToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftsContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    points(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateNFTStrategy(
      nftId: BigNumberish,
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
