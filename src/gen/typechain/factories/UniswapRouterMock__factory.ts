/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UniswapRouterMock,
  UniswapRouterMockInterface,
} from "../UniswapRouterMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountTokenDesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "addLiquidityETH",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610190806100206000396000f3fe60806040526004361061001e5760003560e01c8063f305d71914610023575b600080fd5b6100366100313660046100a1565b610055565b6040805193845260208401929092529082015260600160405180910390f35b6000808086866100668160026100f8565b92509250925096509650969350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461009c57600080fd5b919050565b60008060008060008060c087890312156100b9578182fd5b6100c287610078565b95506020870135945060408701359350606087013592506100e560808801610078565b915060a087013590509295509295509295565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610155577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b50029056fea264697066735822122050c52bd48389f6d5a379c05135bf28b0aa7cfed6b7105e8e71c36595cecaebae64736f6c63430008030033";

type UniswapRouterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapRouterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapRouterMock__factory extends ContractFactory {
  constructor(...args: UniswapRouterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "UniswapRouterMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UniswapRouterMock> {
    return super.deploy(overrides || {}) as Promise<UniswapRouterMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UniswapRouterMock {
    return super.attach(address) as UniswapRouterMock;
  }
  connect(signer: Signer): UniswapRouterMock__factory {
    return super.connect(signer) as UniswapRouterMock__factory;
  }
  static readonly contractName: "UniswapRouterMock";
  public readonly contractName: "UniswapRouterMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapRouterMockInterface {
    return new utils.Interface(_abi) as UniswapRouterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapRouterMock {
    return new Contract(address, _abi, signerOrProvider) as UniswapRouterMock;
  }
}
