/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { UniswapRouterMock } from "../UniswapRouterMock";

export class UniswapRouterMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UniswapRouterMock> {
    return super.deploy(overrides || {}) as Promise<UniswapRouterMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UniswapRouterMock {
    return super.attach(address) as UniswapRouterMock;
  }
  connect(signer: Signer): UniswapRouterMock__factory {
    return super.connect(signer) as UniswapRouterMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapRouterMock {
    return new Contract(address, _abi, signerOrProvider) as UniswapRouterMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountTokenDesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "addLiquidityETH",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060d58061001f6000396000f3fe608060405260043610601c5760003560e01c8063f305d719146021575b600080fd5b6071600480360360c0811015603557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a00135608f565b60408051938452602084019290925282820152519081900360600190f35b509194909350600284029250905056fea264697066735822122085ce9bf2174a1ee6f49171a4e05a5bcf75428d0000b7fd0636913b52945565ae64736f6c63430007040033";
