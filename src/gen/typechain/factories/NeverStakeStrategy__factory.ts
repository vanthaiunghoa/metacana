/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  NeverStakeStrategy,
  NeverStakeStrategyInterface,
} from "../NeverStakeStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "canStake",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060c18061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806336d8bf9314602d575b600080fd5b603e60383660046052565b50600090565b604051901515815260200160405180910390f35b6000602082840312156062578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146084578182fd5b939250505056fea2646970667358221220124d3b2c71d9aef9b9f17dd15c11f756c18937cb59e665f69976842600e2a6a364736f6c63430008030033";

type NeverStakeStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NeverStakeStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NeverStakeStrategy__factory extends ContractFactory {
  constructor(...args: NeverStakeStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "NeverStakeStrategy";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NeverStakeStrategy> {
    return super.deploy(overrides || {}) as Promise<NeverStakeStrategy>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NeverStakeStrategy {
    return super.attach(address) as NeverStakeStrategy;
  }
  connect(signer: Signer): NeverStakeStrategy__factory {
    return super.connect(signer) as NeverStakeStrategy__factory;
  }
  static readonly contractName: "NeverStakeStrategy";
  public readonly contractName: "NeverStakeStrategy";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NeverStakeStrategyInterface {
    return new utils.Interface(_abi) as NeverStakeStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NeverStakeStrategy {
    return new Contract(address, _abi, signerOrProvider) as NeverStakeStrategy;
  }
}
