/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { UniswapFactoryMock } from "../UniswapFactoryMock";

export class UniswapFactoryMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _uniswapPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UniswapFactoryMock> {
    return super.deploy(
      _uniswapPool,
      overrides || {}
    ) as Promise<UniswapFactoryMock>;
  }
  getDeployTransaction(
    _uniswapPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_uniswapPool, overrides || {});
  }
  attach(address: string): UniswapFactoryMock {
    return super.attach(address) as UniswapFactoryMock;
  }
  connect(signer: Signer): UniswapFactoryMock__factory {
    return super.connect(signer) as UniswapFactoryMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapFactoryMock {
    return new Contract(address, _abi, signerOrProvider) as UniswapFactoryMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_uniswapPool",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "createPair",
    outputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161021b38038061021b83398101604081905261002f91610079565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556100b4565b60006020828403121561008a578081fd5b815173ffffffffffffffffffffffffffffffffffffffff811681146100ad578182fd5b9392505050565b610158806100c36000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063bdd3d8251461003b578063c9c6539614610059575b600080fd5b61004361006c565b6040516100509190610101565b60405180910390f35b6100436100673660046100cf565b610088565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b505060005473ffffffffffffffffffffffffffffffffffffffff1690565b803573ffffffffffffffffffffffffffffffffffffffff811681146100ca57600080fd5b919050565b600080604083850312156100e1578182fd5b6100ea836100a6565b91506100f8602084016100a6565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff9190911681526020019056fea2646970667358221220614151b8025e8c102ffb748fedf5beb57b4b02886fbed374c648dbc1ba8a3cfe64736f6c63430008000033";
