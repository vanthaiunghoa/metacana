/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FactoryMock, FactoryMockInterface } from "../FactoryMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factoryManagerAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "mintBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161062f38038061062f83398101604081905261002f91610079565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556100b4565b60006020828403121561008a578081fd5b815173ffffffffffffffffffffffffffffffffffffffff811681146100ad578182fd5b9392505050565b61056c806100c36000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631f7fdffa1461003b578063731133e914610050575b600080fd5b61004e610049366004610288565b610063565b005b61004e61005e36600461031d565b6100f7565b6000546040517f1f7fdffa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690631f7fdffa906100bf908790879087908790600401610413565b600060405180830381600087803b1580156100d957600080fd5b505af11580156100ed573d6000803e3d6000fd5b5050505050505050565b6000546040517f731133e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063731133e9906100bf908790879087908790600401610473565b803573ffffffffffffffffffffffffffffffffffffffff8116811461017757600080fd5b919050565b600082601f83011261018c578081fd5b8135602067ffffffffffffffff8211156101a8576101a8610507565b8160051b6101b78282016104b8565b8381528281019086840183880185018910156101d1578687fd5b8693505b858410156101f35780358352600193909301929184019184016101d5565b50979650505050505050565b600082601f83011261020f578081fd5b813567ffffffffffffffff81111561022957610229610507565b61025a60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016104b8565b81815284602083860101111561026e578283fd5b816020850160208301379081016020019190915292915050565b6000806000806080858703121561029d578384fd5b6102a685610153565b9350602085013567ffffffffffffffff808211156102c2578485fd5b6102ce8883890161017c565b945060408701359150808211156102e3578384fd5b6102ef8883890161017c565b93506060870135915080821115610304578283fd5b50610311878288016101ff565b91505092959194509250565b60008060008060808587031215610332578384fd5b61033b85610153565b93506020850135925060408501359150606085013567ffffffffffffffff811115610364578182fd5b610311878288016101ff565b6000815180845260208085019450808401835b8381101561039f57815187529582019590820190600101610383565b509495945050505050565b60008151808452815b818110156103cf576020818501810151868301820152016103b3565b818111156103e05782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff86168252608060208301526104426080830186610370565b82810360408401526104548186610370565b9050828103606084015261046881856103aa565b979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff86168252846020830152836040830152608060608301526104ae60808301846103aa565b9695505050505050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156104ff576104ff610507565b604052919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212208bc66a84459946d36c1544a137d2ecd9722a5c6c3a1b07c92ba9ea01fd42deef64736f6c63430008030033";

type FactoryMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FactoryMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FactoryMock__factory extends ContractFactory {
  constructor(...args: FactoryMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "FactoryMock";
  }

  deploy(
    _factoryManagerAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FactoryMock> {
    return super.deploy(
      _factoryManagerAddr,
      overrides || {}
    ) as Promise<FactoryMock>;
  }
  getDeployTransaction(
    _factoryManagerAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_factoryManagerAddr, overrides || {});
  }
  attach(address: string): FactoryMock {
    return super.attach(address) as FactoryMock;
  }
  connect(signer: Signer): FactoryMock__factory {
    return super.connect(signer) as FactoryMock__factory;
  }
  static readonly contractName: "FactoryMock";
  public readonly contractName: "FactoryMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FactoryMockInterface {
    return new utils.Interface(_abi) as FactoryMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FactoryMock {
    return new Contract(address, _abi, signerOrProvider) as FactoryMock;
  }
}
