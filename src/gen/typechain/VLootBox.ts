/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VLootBoxInterface extends utils.Interface {
  contractName: "VLootBox";
  functions: {
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOptionSettings(uint256,uint256,uint16[],uint16[],int16[])": FunctionFragment;
    "setState(address,uint256,uint256,uint256)": FunctionFragment;
    "setTokenIdsForClass(uint256,uint256,uint256[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpack(uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOptionSettings",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setState",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenIdsForClass",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpack",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOptionSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenIdsForClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpack", data: BytesLike): Result;

  events: {
    "LootBoxOpened(uint256,address,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LootBoxOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LootBoxOpenedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    optionId: BigNumber;
    buyer: string;
    boxesPurchased: BigNumber;
    tokenId: BigNumber;
    classId: BigNumber;
    attId: BigNumber;
  }
>;

export type LootBoxOpenedEventFilter = TypedEventFilter<LootBoxOpenedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VLootBox extends BaseContract {
  contractName: "VLootBox";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VLootBoxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOptionSettings(
      _option: BigNumberish,
      _maxQuantityPerOpen: BigNumberish,
      _classProbabilities: BigNumberish[],
      _guarantees: BigNumberish[],
      _maxPerClass: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setState(
      _factoryAddress: string,
      _numOptions: BigNumberish,
      _numClasses: BigNumberish,
      _seed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenIdsForClass(
      _optionId: BigNumberish,
      _classId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpack(
      _optionId: BigNumberish,
      _toAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOptionSettings(
    _option: BigNumberish,
    _maxQuantityPerOpen: BigNumberish,
    _classProbabilities: BigNumberish[],
    _guarantees: BigNumberish[],
    _maxPerClass: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setState(
    _factoryAddress: string,
    _numOptions: BigNumberish,
    _numClasses: BigNumberish,
    _seed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenIdsForClass(
    _optionId: BigNumberish,
    _classId: BigNumberish,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpack(
    _optionId: BigNumberish,
    _toAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setOptionSettings(
      _option: BigNumberish,
      _maxQuantityPerOpen: BigNumberish,
      _classProbabilities: BigNumberish[],
      _guarantees: BigNumberish[],
      _maxPerClass: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setState(
      _factoryAddress: string,
      _numOptions: BigNumberish,
      _numClasses: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenIdsForClass(
      _optionId: BigNumberish,
      _classId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpack(
      _optionId: BigNumberish,
      _toAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { attId: BigNumber; classId: BigNumber }
    >;
  };

  filters: {
    "LootBoxOpened(uint256,address,uint256,uint256,uint256,uint256)"(
      optionId?: BigNumberish | null,
      buyer?: string | null,
      boxesPurchased?: null,
      tokenId?: null,
      classId?: null,
      attId?: null
    ): LootBoxOpenedEventFilter;
    LootBoxOpened(
      optionId?: BigNumberish | null,
      buyer?: string | null,
      boxesPurchased?: null,
      tokenId?: null,
      classId?: null,
      attId?: null
    ): LootBoxOpenedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOptionSettings(
      _option: BigNumberish,
      _maxQuantityPerOpen: BigNumberish,
      _classProbabilities: BigNumberish[],
      _guarantees: BigNumberish[],
      _maxPerClass: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setState(
      _factoryAddress: string,
      _numOptions: BigNumberish,
      _numClasses: BigNumberish,
      _seed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenIdsForClass(
      _optionId: BigNumberish,
      _classId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpack(
      _optionId: BigNumberish,
      _toAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOptionSettings(
      _option: BigNumberish,
      _maxQuantityPerOpen: BigNumberish,
      _classProbabilities: BigNumberish[],
      _guarantees: BigNumberish[],
      _maxPerClass: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setState(
      _factoryAddress: string,
      _numOptions: BigNumberish,
      _numClasses: BigNumberish,
      _seed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenIdsForClass(
      _optionId: BigNumberish,
      _classId: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpack(
      _optionId: BigNumberish,
      _toAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
