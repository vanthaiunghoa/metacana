/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TokenVestingPoolInterface extends utils.Interface {
  contractName: "TokenVestingPool";
  functions: {
    "addBeneficiary(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "beneficiaries(uint256)": FunctionFragment;
    "beneficiaryDistributionContracts(address,uint256)": FunctionFragment;
    "distributedTokens()": FunctionFragment;
    "getDistributionContracts(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "token()": FunctionFragment;
    "totalFunds()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBeneficiary",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryDistributionContracts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionContracts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryDistributionContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BeneficiaryAdded(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BeneficiaryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type BeneficiaryAddedEvent = TypedEvent<
  [string, string, BigNumber],
  { beneficiary: string; vesting: string; amount: BigNumber }
>;

export type BeneficiaryAddedEventFilter =
  TypedEventFilter<BeneficiaryAddedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenVestingPool extends BaseContract {
  contractName: "TokenVestingPool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenVestingPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBeneficiary(
      _beneficiary: string,
      _lockDurationAfterTge: BigNumberish,
      _unlockTokenPercentAfterTge: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beneficiaries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    beneficiaryDistributionContracts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    distributedTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDistributionContracts(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBeneficiary(
    _beneficiary: string,
    _lockDurationAfterTge: BigNumberish,
    _unlockTokenPercentAfterTge: BigNumberish,
    _start: BigNumberish,
    _cliff: BigNumberish,
    _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
    _duration: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beneficiaries(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  beneficiaryDistributionContracts(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  distributedTokens(overrides?: CallOverrides): Promise<BigNumber>;

  getDistributionContracts(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  totalFunds(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBeneficiary(
      _beneficiary: string,
      _lockDurationAfterTge: BigNumberish,
      _unlockTokenPercentAfterTge: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    beneficiaries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    beneficiaryDistributionContracts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    distributedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionContracts(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    totalFunds(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BeneficiaryAdded(address,address,uint256)"(
      beneficiary?: string | null,
      vesting?: null,
      amount?: null
    ): BeneficiaryAddedEventFilter;
    BeneficiaryAdded(
      beneficiary?: string | null,
      vesting?: null,
      amount?: null
    ): BeneficiaryAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addBeneficiary(
      _beneficiary: string,
      _lockDurationAfterTge: BigNumberish,
      _unlockTokenPercentAfterTge: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beneficiaries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beneficiaryDistributionContracts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionContracts(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalFunds(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBeneficiary(
      _beneficiary: string,
      _lockDurationAfterTge: BigNumberish,
      _unlockTokenPercentAfterTge: BigNumberish,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _monthlyUnlockTokenPercentAfterCliff: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beneficiaries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beneficiaryDistributionContracts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDistributionContracts(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
