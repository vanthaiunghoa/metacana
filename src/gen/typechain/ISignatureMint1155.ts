/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ISignatureMint1155 {
  export type MintRequestStruct = {
    to: string;
    tokenId: BigNumberish;
    uri: string;
    quantity: BigNumberish;
    pricePerToken: BigNumberish;
    currency: string;
    validityStartTimestamp: BigNumberish;
    validityEndTimestamp: BigNumberish;
    uid: BytesLike;
  };

  export type MintRequestStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    to: string;
    tokenId: BigNumber;
    uri: string;
    quantity: BigNumber;
    pricePerToken: BigNumber;
    currency: string;
    validityStartTimestamp: BigNumber;
    validityEndTimestamp: BigNumber;
    uid: string;
  };
}

export interface ISignatureMint1155Interface extends utils.Interface {
  contractName: "ISignatureMint1155";
  functions: {
    "mintTo(address,string,uint256)": FunctionFragment;
    "mintWithSignature((address,uint256,string,uint256,uint256,address,uint128,uint128,bytes32),bytes)": FunctionFragment;
    "verify((address,uint256,string,uint256,uint256,address,uint128,uint128,bytes32),bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "mintTo",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithSignature",
    values: [ISignatureMint1155.MintRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [ISignatureMint1155.MintRequestStruct, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "MintWithSignature(address,address,uint256,tuple)": EventFragment;
    "NewDefaultSaleRecipient(address)": EventFragment;
    "NewOwner(address,address)": EventFragment;
    "NewSaleRecipient(address,uint256,bool)": EventFragment;
    "PrimarySalesFeeUpdates(uint256)": EventFragment;
    "RoyaltyUpdated(uint256)": EventFragment;
    "TokenMinted(address,uint256,string,uint256)": EventFragment;
    "TransfersRestricted(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MintWithSignature"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDefaultSaleRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSaleRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrimarySalesFeeUpdates"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransfersRestricted"): EventFragment;
}

export type MintWithSignatureEvent = TypedEvent<
  [string, string, BigNumber, ISignatureMint1155.MintRequestStructOutput],
  {
    signer: string;
    mintedTo: string;
    tokenIdMinted: BigNumber;
    mintRequest: ISignatureMint1155.MintRequestStructOutput;
  }
>;

export type MintWithSignatureEventFilter =
  TypedEventFilter<MintWithSignatureEvent>;

export type NewDefaultSaleRecipientEvent = TypedEvent<
  [string],
  { recipient: string }
>;

export type NewDefaultSaleRecipientEventFilter =
  TypedEventFilter<NewDefaultSaleRecipientEvent>;

export type NewOwnerEvent = TypedEvent<
  [string, string],
  { prevOwner: string; newOwner: string }
>;

export type NewOwnerEventFilter = TypedEventFilter<NewOwnerEvent>;

export type NewSaleRecipientEvent = TypedEvent<
  [string, BigNumber, boolean],
  { recipient: string; _tokenId: BigNumber; isDefaultRecipient: boolean }
>;

export type NewSaleRecipientEventFilter =
  TypedEventFilter<NewSaleRecipientEvent>;

export type PrimarySalesFeeUpdatesEvent = TypedEvent<
  [BigNumber],
  { newFeeBps: BigNumber }
>;

export type PrimarySalesFeeUpdatesEventFilter =
  TypedEventFilter<PrimarySalesFeeUpdatesEvent>;

export type RoyaltyUpdatedEvent = TypedEvent<
  [BigNumber],
  { newRoyaltyBps: BigNumber }
>;

export type RoyaltyUpdatedEventFilter = TypedEventFilter<RoyaltyUpdatedEvent>;

export type TokenMintedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  {
    mintedTo: string;
    tokenIdMinted: BigNumber;
    uri: string;
    quantityMinted: BigNumber;
  }
>;

export type TokenMintedEventFilter = TypedEventFilter<TokenMintedEvent>;

export type TransfersRestrictedEvent = TypedEvent<
  [boolean],
  { restricted: boolean }
>;

export type TransfersRestrictedEventFilter =
  TypedEventFilter<TransfersRestrictedEvent>;

export interface ISignatureMint1155 extends BaseContract {
  contractName: "ISignatureMint1155";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISignatureMint1155Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mintTo(
      to: string,
      uri: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWithSignature(
      req: ISignatureMint1155.MintRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verify(
      req: ISignatureMint1155.MintRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; signer: string }>;
  };

  mintTo(
    to: string,
    uri: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWithSignature(
    req: ISignatureMint1155.MintRequestStruct,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verify(
    req: ISignatureMint1155.MintRequestStruct,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { success: boolean; signer: string }>;

  callStatic: {
    mintTo(
      to: string,
      uri: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithSignature(
      req: ISignatureMint1155.MintRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verify(
      req: ISignatureMint1155.MintRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; signer: string }>;
  };

  filters: {
    "MintWithSignature(address,address,uint256,tuple)"(
      signer?: string | null,
      mintedTo?: string | null,
      tokenIdMinted?: BigNumberish | null,
      mintRequest?: null
    ): MintWithSignatureEventFilter;
    MintWithSignature(
      signer?: string | null,
      mintedTo?: string | null,
      tokenIdMinted?: BigNumberish | null,
      mintRequest?: null
    ): MintWithSignatureEventFilter;

    "NewDefaultSaleRecipient(address)"(
      recipient?: string | null
    ): NewDefaultSaleRecipientEventFilter;
    NewDefaultSaleRecipient(
      recipient?: string | null
    ): NewDefaultSaleRecipientEventFilter;

    "NewOwner(address,address)"(
      prevOwner?: null,
      newOwner?: null
    ): NewOwnerEventFilter;
    NewOwner(prevOwner?: null, newOwner?: null): NewOwnerEventFilter;

    "NewSaleRecipient(address,uint256,bool)"(
      recipient?: string | null,
      _tokenId?: BigNumberish | null,
      isDefaultRecipient?: null
    ): NewSaleRecipientEventFilter;
    NewSaleRecipient(
      recipient?: string | null,
      _tokenId?: BigNumberish | null,
      isDefaultRecipient?: null
    ): NewSaleRecipientEventFilter;

    "PrimarySalesFeeUpdates(uint256)"(
      newFeeBps?: null
    ): PrimarySalesFeeUpdatesEventFilter;
    PrimarySalesFeeUpdates(newFeeBps?: null): PrimarySalesFeeUpdatesEventFilter;

    "RoyaltyUpdated(uint256)"(newRoyaltyBps?: null): RoyaltyUpdatedEventFilter;
    RoyaltyUpdated(newRoyaltyBps?: null): RoyaltyUpdatedEventFilter;

    "TokenMinted(address,uint256,string,uint256)"(
      mintedTo?: string | null,
      tokenIdMinted?: BigNumberish | null,
      uri?: null,
      quantityMinted?: null
    ): TokenMintedEventFilter;
    TokenMinted(
      mintedTo?: string | null,
      tokenIdMinted?: BigNumberish | null,
      uri?: null,
      quantityMinted?: null
    ): TokenMintedEventFilter;

    "TransfersRestricted(bool)"(
      restricted?: null
    ): TransfersRestrictedEventFilter;
    TransfersRestricted(restricted?: null): TransfersRestrictedEventFilter;
  };

  estimateGas: {
    mintTo(
      to: string,
      uri: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWithSignature(
      req: ISignatureMint1155.MintRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verify(
      req: ISignatureMint1155.MintRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mintTo(
      to: string,
      uri: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWithSignature(
      req: ISignatureMint1155.MintRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      req: ISignatureMint1155.MintRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
