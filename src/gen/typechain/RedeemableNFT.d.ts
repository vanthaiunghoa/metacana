/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RedeemableNFTInterface extends ethers.utils.Interface {
  functions: {
    "nfts(uint256)": FunctionFragment;
    "nftsContract()": FunctionFragment;
    "points(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "nfts", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nftsContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "points", values: [string]): string;

  decodeFunctionResult(functionFragment: "nfts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "points", data: BytesLike): Result;

  events: {
    "NFTAdded(uint256,uint256,address,address)": EventFragment;
    "NFTRedeemed(address,uint256)": EventFragment;
    "NFTStrategyUpdated(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTStrategyUpdated"): EventFragment;
}

export class RedeemableNFT extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RedeemableNFTInterface;

  functions: {
    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        strategy: string;
        pointsToRedeem: BigNumber;
        creator: string;
      }
    >;

    "nfts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        strategy: string;
        pointsToRedeem: BigNumber;
        creator: string;
      }
    >;

    nftsContract(overrides?: CallOverrides): Promise<[string]>;

    "nftsContract()"(overrides?: CallOverrides): Promise<[string]>;

    points(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "points(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  nfts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      strategy: string;
      pointsToRedeem: BigNumber;
      creator: string;
    }
  >;

  "nfts(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      strategy: string;
      pointsToRedeem: BigNumber;
      creator: string;
    }
  >;

  nftsContract(overrides?: CallOverrides): Promise<string>;

  "nftsContract()"(overrides?: CallOverrides): Promise<string>;

  points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "points(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        strategy: string;
        pointsToRedeem: BigNumber;
        creator: string;
      }
    >;

    "nfts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        strategy: string;
        pointsToRedeem: BigNumber;
        creator: string;
      }
    >;

    nftsContract(overrides?: CallOverrides): Promise<string>;

    "nftsContract()"(overrides?: CallOverrides): Promise<string>;

    points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "points(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    NFTAdded(
      nftId: BigNumberish | null,
      pointsToRedeem: BigNumberish | null,
      strategyAddress: string | null,
      creator: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        nftId: BigNumber;
        pointsToRedeem: BigNumber;
        strategyAddress: string;
        creator: string;
      }
    >;

    NFTRedeemed(
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    NFTStrategyUpdated(
      nftId: BigNumberish | null,
      previousStrategy: string | null,
      newStrategy: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { nftId: BigNumber; previousStrategy: string; newStrategy: string }
    >;
  };

  estimateGas: {
    nfts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "nfts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftsContract(overrides?: CallOverrides): Promise<BigNumber>;

    "nftsContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    points(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "points(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    nfts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nfts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftsContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nftsContract()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    points(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "points(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
